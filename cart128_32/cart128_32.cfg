SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak; # 2k stack
}

MEMORY {
    # Zero page
    ZP:       start = $0002, size = $001A, type = rw, define = yes;
    
    # C128 32K cartridge ROM area 
    # MID bank: $8000-$BFFF (16K)
    ROMLO:    start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    # HIGH bank: $C000-$FEFF (16K minus MMU hole)
    # Note: $FF00-$FF04 is MMU hole and cannot be used
    ROMHI:    start = $c000, size = $3f00, file = %O, fill = yes, define = yes;
    
    # Available RAM areas in C128 (limited when using 32K cart)
    RAM:      start = $1c00, size = $6400, type = rw, define = yes;
}

SEGMENTS {
    # Cartridge startup code - must be at $8000
    STARTUP:  load = ROMLO, type = ro, start = $8000;
    
    # Low ROM segments (MID bank $8000-$BFFF)
    LOWCODE:  load = ROMLO, type = ro, optional = yes;
    CODE:     load = ROMLO, type = ro;
    RODATA:   load = ROMLO, type = ro;
    INIT:     load = ROMLO, type = ro, define = yes, optional = yes;
    
    # High ROM segments (HIGH bank $C000-$FEFF)
    HICODE:   load = ROMHI, type = ro, optional = yes;
    HIRODATA: load = ROMHI, type = ro, optional = yes;
    
    # Data segments
    DATA:     load = ROMLO, run = RAM, type = rw, define = yes;
    ONCE:     load = ROMLO, type = ro, define = yes, optional = yes;
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes;
    
    # Zero page
    ZEROPAGE: load = ZP, type = zp;
    
    # Padding to fill cartridges
    PADLO:    load = ROMLO, type = ro, start = $bfff;
    PADHI:    load = ROMHI, type = ro, start = $feff;
}

FEATURES {
    CONDES: segment = INIT,
            type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__;
}

